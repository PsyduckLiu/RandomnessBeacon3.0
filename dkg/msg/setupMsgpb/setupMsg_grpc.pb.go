// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: setupMsg.proto

package setupMsgpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SetupMsgHandleClient is the client API for SetupMsgHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetupMsgHandleClient interface {
	// Handles a received SetupMsg message
	SetupMsgReceive(ctx context.Context, in *SetupMsg, opts ...grpc.CallOption) (*SetupMsgResponse, error)
}

type setupMsgHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewSetupMsgHandleClient(cc grpc.ClientConnInterface) SetupMsgHandleClient {
	return &setupMsgHandleClient{cc}
}

func (c *setupMsgHandleClient) SetupMsgReceive(ctx context.Context, in *SetupMsg, opts ...grpc.CallOption) (*SetupMsgResponse, error) {
	out := new(SetupMsgResponse)
	err := c.cc.Invoke(ctx, "/setupMsgpb.SetupMsgHandle/SetupMsgReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetupMsgHandleServer is the server API for SetupMsgHandle service.
// All implementations must embed UnimplementedSetupMsgHandleServer
// for forward compatibility
type SetupMsgHandleServer interface {
	// Handles a received SetupMsg message
	SetupMsgReceive(context.Context, *SetupMsg) (*SetupMsgResponse, error)
	mustEmbedUnimplementedSetupMsgHandleServer()
}

// UnimplementedSetupMsgHandleServer must be embedded to have forward compatible implementations.
type UnimplementedSetupMsgHandleServer struct {
}

func (UnimplementedSetupMsgHandleServer) SetupMsgReceive(context.Context, *SetupMsg) (*SetupMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupMsgReceive not implemented")
}
func (UnimplementedSetupMsgHandleServer) mustEmbedUnimplementedSetupMsgHandleServer() {}

// UnsafeSetupMsgHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetupMsgHandleServer will
// result in compilation errors.
type UnsafeSetupMsgHandleServer interface {
	mustEmbedUnimplementedSetupMsgHandleServer()
}

func RegisterSetupMsgHandleServer(s grpc.ServiceRegistrar, srv SetupMsgHandleServer) {
	s.RegisterService(&SetupMsgHandle_ServiceDesc, srv)
}

func _SetupMsgHandle_SetupMsgReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetupMsgHandleServer).SetupMsgReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setupMsgpb.SetupMsgHandle/SetupMsgReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetupMsgHandleServer).SetupMsgReceive(ctx, req.(*SetupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// SetupMsgHandle_ServiceDesc is the grpc.ServiceDesc for SetupMsgHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SetupMsgHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "setupMsgpb.SetupMsgHandle",
	HandlerType: (*SetupMsgHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupMsgReceive",
			Handler:    _SetupMsgHandle_SetupMsgReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "setupMsg.proto",
}
