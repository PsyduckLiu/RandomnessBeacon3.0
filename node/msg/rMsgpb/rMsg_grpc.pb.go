// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: rMsg.proto

package rMsgpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RMsgHandleClient is the client API for RMsgHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RMsgHandleClient interface {
	// Handles a received RMsg message
	RMsgReceive(ctx context.Context, in *RMsg, opts ...grpc.CallOption) (*RMsgResponse, error)
}

type rMsgHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewRMsgHandleClient(cc grpc.ClientConnInterface) RMsgHandleClient {
	return &rMsgHandleClient{cc}
}

func (c *rMsgHandleClient) RMsgReceive(ctx context.Context, in *RMsg, opts ...grpc.CallOption) (*RMsgResponse, error) {
	out := new(RMsgResponse)
	err := c.cc.Invoke(ctx, "/rMsgpb.RMsgHandle/RMsgReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RMsgHandleServer is the server API for RMsgHandle service.
// All implementations must embed UnimplementedRMsgHandleServer
// for forward compatibility
type RMsgHandleServer interface {
	// Handles a received RMsg message
	RMsgReceive(context.Context, *RMsg) (*RMsgResponse, error)
	mustEmbedUnimplementedRMsgHandleServer()
}

// UnimplementedRMsgHandleServer must be embedded to have forward compatible implementations.
type UnimplementedRMsgHandleServer struct {
}

func (UnimplementedRMsgHandleServer) RMsgReceive(context.Context, *RMsg) (*RMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RMsgReceive not implemented")
}
func (UnimplementedRMsgHandleServer) mustEmbedUnimplementedRMsgHandleServer() {}

// UnsafeRMsgHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RMsgHandleServer will
// result in compilation errors.
type UnsafeRMsgHandleServer interface {
	mustEmbedUnimplementedRMsgHandleServer()
}

func RegisterRMsgHandleServer(s grpc.ServiceRegistrar, srv RMsgHandleServer) {
	s.RegisterService(&RMsgHandle_ServiceDesc, srv)
}

func _RMsgHandle_RMsgReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMsgHandleServer).RMsgReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rMsgpb.RMsgHandle/RMsgReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMsgHandleServer).RMsgReceive(ctx, req.(*RMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// RMsgHandle_ServiceDesc is the grpc.ServiceDesc for RMsgHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RMsgHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rMsgpb.RMsgHandle",
	HandlerType: (*RMsgHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RMsgReceive",
			Handler:    _RMsgHandle_RMsgReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rMsg.proto",
}
