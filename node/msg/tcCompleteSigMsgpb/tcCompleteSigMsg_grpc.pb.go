// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: tcCompleteSigMsg.proto

package tcCompleteSigMsgpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TcCompleteSigMsgHandleClient is the client API for TcCompleteSigMsgHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TcCompleteSigMsgHandleClient interface {
	// Handles a received tcCompleteSigMsg message
	TcCompleteSigMsgReceive(ctx context.Context, in *TcCompleteSigMsg, opts ...grpc.CallOption) (*TcCompleteSigMsgResponse, error)
}

type tcCompleteSigMsgHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewTcCompleteSigMsgHandleClient(cc grpc.ClientConnInterface) TcCompleteSigMsgHandleClient {
	return &tcCompleteSigMsgHandleClient{cc}
}

func (c *tcCompleteSigMsgHandleClient) TcCompleteSigMsgReceive(ctx context.Context, in *TcCompleteSigMsg, opts ...grpc.CallOption) (*TcCompleteSigMsgResponse, error) {
	out := new(TcCompleteSigMsgResponse)
	err := c.cc.Invoke(ctx, "/tcCompleteSigMsgpb.TcCompleteSigMsgHandle/TcCompleteSigMsgReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TcCompleteSigMsgHandleServer is the server API for TcCompleteSigMsgHandle service.
// All implementations must embed UnimplementedTcCompleteSigMsgHandleServer
// for forward compatibility
type TcCompleteSigMsgHandleServer interface {
	// Handles a received tcCompleteSigMsg message
	TcCompleteSigMsgReceive(context.Context, *TcCompleteSigMsg) (*TcCompleteSigMsgResponse, error)
	mustEmbedUnimplementedTcCompleteSigMsgHandleServer()
}

// UnimplementedTcCompleteSigMsgHandleServer must be embedded to have forward compatible implementations.
type UnimplementedTcCompleteSigMsgHandleServer struct {
}

func (UnimplementedTcCompleteSigMsgHandleServer) TcCompleteSigMsgReceive(context.Context, *TcCompleteSigMsg) (*TcCompleteSigMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TcCompleteSigMsgReceive not implemented")
}
func (UnimplementedTcCompleteSigMsgHandleServer) mustEmbedUnimplementedTcCompleteSigMsgHandleServer() {
}

// UnsafeTcCompleteSigMsgHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TcCompleteSigMsgHandleServer will
// result in compilation errors.
type UnsafeTcCompleteSigMsgHandleServer interface {
	mustEmbedUnimplementedTcCompleteSigMsgHandleServer()
}

func RegisterTcCompleteSigMsgHandleServer(s grpc.ServiceRegistrar, srv TcCompleteSigMsgHandleServer) {
	s.RegisterService(&TcCompleteSigMsgHandle_ServiceDesc, srv)
}

func _TcCompleteSigMsgHandle_TcCompleteSigMsgReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcCompleteSigMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcCompleteSigMsgHandleServer).TcCompleteSigMsgReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcCompleteSigMsgpb.TcCompleteSigMsgHandle/TcCompleteSigMsgReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcCompleteSigMsgHandleServer).TcCompleteSigMsgReceive(ctx, req.(*TcCompleteSigMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// TcCompleteSigMsgHandle_ServiceDesc is the grpc.ServiceDesc for TcCompleteSigMsgHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TcCompleteSigMsgHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tcCompleteSigMsgpb.TcCompleteSigMsgHandle",
	HandlerType: (*TcCompleteSigMsgHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TcCompleteSigMsgReceive",
			Handler:    _TcCompleteSigMsgHandle_TcCompleteSigMsgReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcCompleteSigMsg.proto",
}
