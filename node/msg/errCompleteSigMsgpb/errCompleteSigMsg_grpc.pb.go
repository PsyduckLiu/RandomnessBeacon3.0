// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: errCompleteSigMsg.proto

package errCompleteSigMsgpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ErrCompleteSigMsgHandleClient is the client API for ErrCompleteSigMsgHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrCompleteSigMsgHandleClient interface {
	// Handles a received errCompleteSigMsg message
	ErrCompleteSigMsgReceive(ctx context.Context, in *ErrCompleteSigMsg, opts ...grpc.CallOption) (*ErrCompleteSigMsgResponse, error)
}

type errCompleteSigMsgHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewErrCompleteSigMsgHandleClient(cc grpc.ClientConnInterface) ErrCompleteSigMsgHandleClient {
	return &errCompleteSigMsgHandleClient{cc}
}

func (c *errCompleteSigMsgHandleClient) ErrCompleteSigMsgReceive(ctx context.Context, in *ErrCompleteSigMsg, opts ...grpc.CallOption) (*ErrCompleteSigMsgResponse, error) {
	out := new(ErrCompleteSigMsgResponse)
	err := c.cc.Invoke(ctx, "/errCompleteSigMsgpb.ErrCompleteSigMsgHandle/ErrCompleteSigMsgReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrCompleteSigMsgHandleServer is the server API for ErrCompleteSigMsgHandle service.
// All implementations must embed UnimplementedErrCompleteSigMsgHandleServer
// for forward compatibility
type ErrCompleteSigMsgHandleServer interface {
	// Handles a received errCompleteSigMsg message
	ErrCompleteSigMsgReceive(context.Context, *ErrCompleteSigMsg) (*ErrCompleteSigMsgResponse, error)
	mustEmbedUnimplementedErrCompleteSigMsgHandleServer()
}

// UnimplementedErrCompleteSigMsgHandleServer must be embedded to have forward compatible implementations.
type UnimplementedErrCompleteSigMsgHandleServer struct {
}

func (UnimplementedErrCompleteSigMsgHandleServer) ErrCompleteSigMsgReceive(context.Context, *ErrCompleteSigMsg) (*ErrCompleteSigMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrCompleteSigMsgReceive not implemented")
}
func (UnimplementedErrCompleteSigMsgHandleServer) mustEmbedUnimplementedErrCompleteSigMsgHandleServer() {
}

// UnsafeErrCompleteSigMsgHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrCompleteSigMsgHandleServer will
// result in compilation errors.
type UnsafeErrCompleteSigMsgHandleServer interface {
	mustEmbedUnimplementedErrCompleteSigMsgHandleServer()
}

func RegisterErrCompleteSigMsgHandleServer(s grpc.ServiceRegistrar, srv ErrCompleteSigMsgHandleServer) {
	s.RegisterService(&ErrCompleteSigMsgHandle_ServiceDesc, srv)
}

func _ErrCompleteSigMsgHandle_ErrCompleteSigMsgReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrCompleteSigMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrCompleteSigMsgHandleServer).ErrCompleteSigMsgReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errCompleteSigMsgpb.ErrCompleteSigMsgHandle/ErrCompleteSigMsgReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrCompleteSigMsgHandleServer).ErrCompleteSigMsgReceive(ctx, req.(*ErrCompleteSigMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrCompleteSigMsgHandle_ServiceDesc is the grpc.ServiceDesc for ErrCompleteSigMsgHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrCompleteSigMsgHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "errCompleteSigMsgpb.ErrCompleteSigMsgHandle",
	HandlerType: (*ErrCompleteSigMsgHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ErrCompleteSigMsgReceive",
			Handler:    _ErrCompleteSigMsgHandle_ErrCompleteSigMsgReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "errCompleteSigMsg.proto",
}
