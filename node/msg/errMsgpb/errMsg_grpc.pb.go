// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: errMsg.proto

package errMsgpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ErrMsgHandleClient is the client API for ErrMsgHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrMsgHandleClient interface {
	// Handles a received ErrMsg message
	ErrMsgReceive(ctx context.Context, in *ErrMsg, opts ...grpc.CallOption) (*ErrMsgResponse, error)
}

type errMsgHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewErrMsgHandleClient(cc grpc.ClientConnInterface) ErrMsgHandleClient {
	return &errMsgHandleClient{cc}
}

func (c *errMsgHandleClient) ErrMsgReceive(ctx context.Context, in *ErrMsg, opts ...grpc.CallOption) (*ErrMsgResponse, error) {
	out := new(ErrMsgResponse)
	err := c.cc.Invoke(ctx, "/errMsgpb.ErrMsgHandle/ErrMsgReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrMsgHandleServer is the server API for ErrMsgHandle service.
// All implementations must embed UnimplementedErrMsgHandleServer
// for forward compatibility
type ErrMsgHandleServer interface {
	// Handles a received ErrMsg message
	ErrMsgReceive(context.Context, *ErrMsg) (*ErrMsgResponse, error)
	mustEmbedUnimplementedErrMsgHandleServer()
}

// UnimplementedErrMsgHandleServer must be embedded to have forward compatible implementations.
type UnimplementedErrMsgHandleServer struct {
}

func (UnimplementedErrMsgHandleServer) ErrMsgReceive(context.Context, *ErrMsg) (*ErrMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrMsgReceive not implemented")
}
func (UnimplementedErrMsgHandleServer) mustEmbedUnimplementedErrMsgHandleServer() {}

// UnsafeErrMsgHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrMsgHandleServer will
// result in compilation errors.
type UnsafeErrMsgHandleServer interface {
	mustEmbedUnimplementedErrMsgHandleServer()
}

func RegisterErrMsgHandleServer(s grpc.ServiceRegistrar, srv ErrMsgHandleServer) {
	s.RegisterService(&ErrMsgHandle_ServiceDesc, srv)
}

func _ErrMsgHandle_ErrMsgReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrMsgHandleServer).ErrMsgReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errMsgpb.ErrMsgHandle/ErrMsgReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrMsgHandleServer).ErrMsgReceive(ctx, req.(*ErrMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrMsgHandle_ServiceDesc is the grpc.ServiceDesc for ErrMsgHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrMsgHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "errMsgpb.ErrMsgHandle",
	HandlerType: (*ErrMsgHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ErrMsgReceive",
			Handler:    _ErrMsgHandle_ErrMsgReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "errMsg.proto",
}
