// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: errSetupMsg.proto

package errSetupMsgpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ErrSetupMsgHandleClient is the client API for ErrSetupMsgHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrSetupMsgHandleClient interface {
	// Handles a received ErrSetupMsg message
	ErrSetupMsgReceive(ctx context.Context, in *ErrSetupMsg, opts ...grpc.CallOption) (*ErrSetupMsgResponse, error)
}

type errSetupMsgHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewErrSetupMsgHandleClient(cc grpc.ClientConnInterface) ErrSetupMsgHandleClient {
	return &errSetupMsgHandleClient{cc}
}

func (c *errSetupMsgHandleClient) ErrSetupMsgReceive(ctx context.Context, in *ErrSetupMsg, opts ...grpc.CallOption) (*ErrSetupMsgResponse, error) {
	out := new(ErrSetupMsgResponse)
	err := c.cc.Invoke(ctx, "/errSetupMsgpb.ErrSetupMsgHandle/ErrSetupMsgReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrSetupMsgHandleServer is the server API for ErrSetupMsgHandle service.
// All implementations must embed UnimplementedErrSetupMsgHandleServer
// for forward compatibility
type ErrSetupMsgHandleServer interface {
	// Handles a received ErrSetupMsg message
	ErrSetupMsgReceive(context.Context, *ErrSetupMsg) (*ErrSetupMsgResponse, error)
	mustEmbedUnimplementedErrSetupMsgHandleServer()
}

// UnimplementedErrSetupMsgHandleServer must be embedded to have forward compatible implementations.
type UnimplementedErrSetupMsgHandleServer struct {
}

func (UnimplementedErrSetupMsgHandleServer) ErrSetupMsgReceive(context.Context, *ErrSetupMsg) (*ErrSetupMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrSetupMsgReceive not implemented")
}
func (UnimplementedErrSetupMsgHandleServer) mustEmbedUnimplementedErrSetupMsgHandleServer() {}

// UnsafeErrSetupMsgHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrSetupMsgHandleServer will
// result in compilation errors.
type UnsafeErrSetupMsgHandleServer interface {
	mustEmbedUnimplementedErrSetupMsgHandleServer()
}

func RegisterErrSetupMsgHandleServer(s grpc.ServiceRegistrar, srv ErrSetupMsgHandleServer) {
	s.RegisterService(&ErrSetupMsgHandle_ServiceDesc, srv)
}

func _ErrSetupMsgHandle_ErrSetupMsgReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrSetupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrSetupMsgHandleServer).ErrSetupMsgReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errSetupMsgpb.ErrSetupMsgHandle/ErrSetupMsgReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrSetupMsgHandleServer).ErrSetupMsgReceive(ctx, req.(*ErrSetupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrSetupMsgHandle_ServiceDesc is the grpc.ServiceDesc for ErrSetupMsgHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrSetupMsgHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "errSetupMsgpb.ErrSetupMsgHandle",
	HandlerType: (*ErrSetupMsgHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ErrSetupMsgReceive",
			Handler:    _ErrSetupMsgHandle_ErrSetupMsgReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "errSetupMsg.proto",
}
