// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: helloMsg.proto

package helloMsgpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloMsgHandleClient is the client API for HelloMsgHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloMsgHandleClient interface {
	// Handles a received HelloMsg message
	HelloMsgReceive(ctx context.Context, in *HelloMsg, opts ...grpc.CallOption) (*HelloMsgResponse, error)
}

type helloMsgHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloMsgHandleClient(cc grpc.ClientConnInterface) HelloMsgHandleClient {
	return &helloMsgHandleClient{cc}
}

func (c *helloMsgHandleClient) HelloMsgReceive(ctx context.Context, in *HelloMsg, opts ...grpc.CallOption) (*HelloMsgResponse, error) {
	out := new(HelloMsgResponse)
	err := c.cc.Invoke(ctx, "/helloMsgpb.HelloMsgHandle/HelloMsgReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloMsgHandleServer is the server API for HelloMsgHandle service.
// All implementations must embed UnimplementedHelloMsgHandleServer
// for forward compatibility
type HelloMsgHandleServer interface {
	// Handles a received HelloMsg message
	HelloMsgReceive(context.Context, *HelloMsg) (*HelloMsgResponse, error)
	mustEmbedUnimplementedHelloMsgHandleServer()
}

// UnimplementedHelloMsgHandleServer must be embedded to have forward compatible implementations.
type UnimplementedHelloMsgHandleServer struct {
}

func (UnimplementedHelloMsgHandleServer) HelloMsgReceive(context.Context, *HelloMsg) (*HelloMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloMsgReceive not implemented")
}
func (UnimplementedHelloMsgHandleServer) mustEmbedUnimplementedHelloMsgHandleServer() {}

// UnsafeHelloMsgHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloMsgHandleServer will
// result in compilation errors.
type UnsafeHelloMsgHandleServer interface {
	mustEmbedUnimplementedHelloMsgHandleServer()
}

func RegisterHelloMsgHandleServer(s grpc.ServiceRegistrar, srv HelloMsgHandleServer) {
	s.RegisterService(&HelloMsgHandle_ServiceDesc, srv)
}

func _HelloMsgHandle_HelloMsgReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloMsgHandleServer).HelloMsgReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloMsgpb.HelloMsgHandle/HelloMsgReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloMsgHandleServer).HelloMsgReceive(ctx, req.(*HelloMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloMsgHandle_ServiceDesc is the grpc.ServiceDesc for HelloMsgHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloMsgHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloMsgpb.HelloMsgHandle",
	HandlerType: (*HelloMsgHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloMsgReceive",
			Handler:    _HelloMsgHandle_HelloMsgReceive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloMsg.proto",
}
